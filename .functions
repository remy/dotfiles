# hex/binary diff
function xdiff() {
  /usr/bin/diff -u <(xxd -c 32 $1) <(xxd -c 32 $2) | diff-so-fancy
}

# trims the output a single line
function single() {
  while read line; do echo -e "\033[1000D\033[K\033[32m$$\033[0m $line" | tr -d '\r\n'; done
}

function zeit() {
  now alias ls | grep $1 | awk '{ gsub(/.now.sh$/,"",$1); gsub(/-/, "/", $1); print "https://zeit.co/rem/"$1"/logs?all=1" }' | xargs open
}

function sha256sum() { openssl sha256 "$@" | awk '{print $2}'; }


# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# List all files, long format, colorized, permissions in octal
function la(){
 	ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}

# generate a gist either from the clipboard, or by piping, or using a filename
# and then immediately get a git.io url for it and stick it on the clipboard
hash gist &>/dev/null;
if [ $? -eq 0 ]; then
  function gist() {
    if [ -t 0 ]; then
      if ((! $# )); then
        command gist -Pcop -f paste.md | gitio
      else
        command gist -cop $@ | gitio
      fi
    else
      command gist -cop $@ < /dev/stdin | gitio
    fi
  }
fi

# Create a git.io short URL
function gitio() {
  local url="$1";
  if [ -t 0 ]; then # read from arg
    if [ -z "${url}" ]; then
      echo "Usage: \`gitio url\`";
      return 1;
    fi;
  else
    read url
  fi

  curl -s -L -q -i https://git.io/ -F "url=${url}" | grep Location | cut -d' ' -f2 | pbcopy; # generate url and copy to clipboard
  pbpaste # echo
}

function put() {
  if [ -t 0 ]; then
    curl -i -X POST -H "authorization: token $JSONBIN_API_KEY" https://jsonbin.org/clip -F "f=@$@" > /dev/null
  else
    curl -X POST -H "authorization: token $JSONBIN_API_KEY" https://jsonbin.org/clip -F "f=@-" < /dev/stdin > /dev/null
  fi
}

function get() {
  curl -X GET -H "authorization: token $JSONBIN_API_KEY" https://jsonbin.org/clip
}

# lets my run `less http...` using lynx to scrape the text content
hash lynx &>/dev/null;
if [ $? -eq 0 ]; then
  function less() {
    local url="$_"
    if [[ $url == http* ]]; then
      local args=( "$@" )
      unset "args[${#args[@]}]" # Removes last element -- also see: help unset
      lynx --dump $url | command less $args
    else
      command less $@
    fi
  }
fi

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar";
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  );

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli";
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz";
    else
      cmd="gzip";
    fi;
  fi;

  echo "Compressing .tar using \`${cmd}\`…";
  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm "${tmpFile}";
  echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@" | diff-so-fancy;
  }
fi;

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}";
  local ip=$(ipconfig getifaddr en0);
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1");
  local gzipsize=$(gzip -c "$1" | wc -c);
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
  printf "orig: %d bytes\n" "$origsize";
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain}…";
  echo ""; # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
      no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
      | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|.cache|.bit|.next|.vscode|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function tap() {
  filename=$(basename $@)
  zxtap2wav -a -f 44100 -i $@ -o "$filename.wav"
}

function dnode() {
  DEBUG=* node $@ > /dev/null
}

base64() {
  if [[ -e "$1" ]]; then
    openssl base64 < "$1" | tr -d '\n' | copy
  else
    echo "$1" | command base64
  fi
}

gififyalt() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# detect a local tap and use that if available, otherwise use the global
# installed one (via npm i -g tap) and run it through babel
hash tap &>/dev/null;
if [ $? -eq 0 ]; then
  tap() {
    # get the real location of tap
    local TAP=$(type -p tap | awk '{ print $3 }')

    # if there's a local one in reach then use that instead
    if [ -e $PWD/node_modules/.bin/tap ]; then
      local TAP="$PWD/node_modules/.bin/tap"
    fi

    # check if we're node 4 or above, if we are, then assume
    # that it can run _some_ ES6
    node -v | awk -F[.v] '{print $2 }' | { read test; test $test -gt 3; }

    # if node.version > 3
    if [ $? -eq 0 ]; then
      $TAP $@
    else
      # else reach for babel
      babel-node $TAP $@
    fi
  }
fi;

function npm-downloads() {
  curl -s https://api.npmjs.org/downloads/point/last-week/$@ | jq .downloads
}

copy() {
  if [ -t 0 ]; then
    cat $@ | pbcopy
  else
    pbcopy < /dev/stdin
  fi
}

# I'm going to lose the original `split` command, but frankly, I never
# use it (last I recall was 2007...)
function trsplit() {
  tr '$@' '\n' < /dev/stdin
}

# grep for a specific term in the running processes
function greps() {
  # ps auxww | grep [t]erm
  ps auxww | grep $(echo $1 | perl -n -e's/^(.)(.*)$/[$1]$2/; print $_')
}

function shrink() {
  # first upload and compress the filename argument
  local OUTPUT=$(curl https://api.tinify.com/shrink \
    --user api:$TINIFY_KEY \
    --data-binary @$1
  )

  local URL=$(echo $OUTPUT | jq .output.url -r)

  local RESULT=$(echo $OUTPUT | jq -r '. + { compression: ((1 - .output.ratio) * 100 | floor) } | "Before: \(.input.size / 1000 | floor)Kb, after \(.output.size / 1000 | floor)Kb, saving \(.compression)%"')

  # then download and overwrite the file with the newly shrunk file
  curl -X POST $URL --user api:$TINIFY_KEY --output $1 -H 'content-type: application/json' -d'{"resize":{"method":"scale","width":1320}}'
  echo "\033[1m$RESULT\033[0m";
}

function _shrink() {
  local URL=$(curl https://api.tinify.com/shrink --progress-bar --user api:$TINIFY_KEY --dump-header /dev/stdout --data-binary @$1 | awk '/Location/ { gsub(/[[:space:]]+$/, ""); printf $2 }')

  curl -X POST $URL --user api:$TINIFY_KEY --dump-header /dev/stdout --output $1 -H 'content-type: application/json' -d'{"resize":{"method":"scale","width":1320}}'
}


local ZXNEXT_IMAGE_FILE=/Applications/cspect/app/cspect-next-2gb.img

function zxput() {
  hdfmonkey put $ZXNEXT_IMAGE_FILE "$1" "${2:-/devel}/$1"
}

function zxget() {
  hdfmonkey get $ZXNEXT_IMAGE_FILE "$1" "${2:-./$(basename $1)}"
}

function zxls() {
  hdfmonkey ls $ZXNEXT_IMAGE_FILE "${1:-/devel}"
}

# usage: zxrm file -- will remove file from /devel directory
# usage: zxrm /foo/bar -- will remove bar from /foo directory
function zxrm() {
  local FILENAME="$1"
  if [ "$FILENAME" = "$(basename "$1")" ]; then
    FILENAME="/devel/$1"
  fi
  echo hdfmonkey rm $ZXNEXT_IMAGE_FILE "$FILENAME"
  hdfmonkey rm $ZXNEXT_IMAGE_FILE "$FILENAME"
}

# usage: zxrmdir /somedirectory -- will remove all the files and the directory
function zxrmdir() {
  # set -x
  local DIR="$1"
  local FILES
  FILES=$(zxls $DIR)
  if [ $? -ne 0 ] ; then
    echo $FILES
    return 1;
  fi

  echo $FILES | awk -v q='"' -v d="$DIR/" '{ $1=""; gsub(/^ /, "", $0); print d $0 }' | while read line; do
    zxrm $line || break
  done
  set +x
}
